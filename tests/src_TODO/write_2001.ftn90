program constructor
  use vGrid_Descriptors, only: vgrid_descriptor,vgd_new,vgd_get,vgd_write,VGD_ERROR
  use Unit_Testing, only: ut_report

  implicit none

  type(vgrid_descriptor) :: d,d_rtn
  integer :: stat,lu=0,fnom,fstouv,fstfrm,fclos,k,ip1
  integer, parameter :: LEVS=4
  integer, dimension(LEVS) :: ip1s
  real(kind=8), dimension(LEVS) :: pres=(/1000.,925.,850.,700./),b=(/0.,0.,0.,0./)
  real*8, dimension(:), pointer :: pres_rtn

  call system('rm -f test.fst')
  stat=fnom(lu,"test.fst","RND",0)
  if(stat.lt.0)then
     print*,'ERROR with fnom'
     call abort
  endif
  stat=fstouv(lu,'RND')
  if(stat.lt.0)then
     print*,'No record in RPN file'
     call abort
  endif

  ! Construct a new set of 3D coordinate descriptors
  do k=1,LEVS
     call convip(ip1s(k),pres(k),2,2,'',.false.)
  enddo
  pres = pres*100. !convert mb to Pa
  stat = vgd_new(d,kind=2,version=1,nk=size(pres),ip1_m=ip1s,a_m_8=pres,b_m_8=b)
  if(stat==VGD_ERROR)then
     call system('rm -f test.fst')
     call exit(1)
  endif
  stat = vgd_write(d,unit=lu,format='fst')
  stat = vgd_get(d,'IP_1 - record ip1',ip1)
  stat = vgd_new(d_rtn,unit=lu,format='fst',ip1=ip1)
  if(stat==VGD_ERROR)then
     call system('rm -f test.fst')
     call exit(1)
  endif
  stat = vgd_get(d_rtn,key='COFA - vertical A coefficient',value=pres_rtn)
  call ut_report(abs(pres_rtn(1)-pres(1)) < epsilon(pres),'Grid_Descriptors::vgd_new vertical build initializer (2001) value')

  stat=fstfrm(lu)
  stat=fclos(lu)

  ! Cleanup
  call system('rm -f test.fst')

end program constructor
