program level_withref_5001

  use vGrid_Descriptors, only: VGD_OK,VGD_ERROR
  use Unit_Testing, only: ut_report
  
  implicit none
  integer :: stat,ier,chek_levels_withref

  stat=VGD_OK
  
  ier=chek_levels_withref('data/dm_1001_from_model_run','data/dm_1001_ips.txt')
  if(ier==VGD_ERROR)stat=VGD_ERROR

  ier=chek_levels_withref('data/dm_1002_from_model_run','data/dm_1002_ips.txt')
  if(ier==VGD_ERROR)stat=VGD_ERROR

  ier=chek_levels_withref('data/dm_5001_from_model_run','data/dm_5001_ips.txt')
  if(ier==VGD_ERROR)stat=VGD_ERROR
  
  ier=chek_levels_withref('data/dm_5002_from_model_run','data/dm_5002_ips.txt')
  if(ier==VGD_ERROR)stat=VGD_ERROR
  
  ier=chek_levels_withref('data/dm_5003_from_model_run','data/dm_5003_ips.txt')
  if(ier==VGD_ERROR)stat=VGD_ERROR
  
  call ut_report(stat,'Grid_Descriptors, vgd_new')

end program level_withref_5001
!====================================================================
!====================================================================
!====================================================================

integer function chek_levels_withref(F_fst,F_ips) result(status)

   use vGrid_Descriptors, only: vgrid_descriptor,vgd_new,vgd_levels,VGD_ERROR,VGD_OK

   implicit none  

   character(len=*) :: F_fst,F_ips

   ! Local variables
   integer, save :: lu=10   
   integer :: fnom,fstouv,fstfrm,lutxt=69
   type(vgrid_descriptor) :: d
   integer, parameter :: nmax=1000
   integer, dimension(nmax) :: liste
   integer :: ier,fstinl,fstprm,fstinf,fstluk,infon,i,j,k
   real, dimension(:,:,:), pointer :: pres
   real*8, dimension(:,:,:), pointer :: pres_8
   real, dimension(:,:), pointer :: ff
   real*8, dimension(:,:), pointer :: ff_8
   real :: epsilon=5.0e-6
   integer, dimension(:), pointer :: ip1s
   logical :: ok
   ! Variable for fstprm, sorry...
   integer ::dateo, datev, datyp, deet, dltf, extra1, extra2, extra3, ig1,&
        ig2, ig3, ig4, ip1, ip2, ip3, iun, key, lng, nbits,&
        ni,  nj, nk, npak, npas, swa, ubc
   character(len=12) :: etiket
   character(len=4)  :: nomvar
   character(len=2)  :: typvar
   character(len=1)  :: grtyp, ctype
   logical :: rewrit
   
   status=VGD_ERROR   

   lu=lu+1

   ier=fnom(lu,F_fst,"RND",0)
   if(ier.lt.0)then
      print*,'ERROR with fnom on ',trim(F_fst)
      return
   endif
   ier=fstouv(lu,'RND')
   if(ier.le.0)then
      print*,'No record in RPN file ',trim(F_fst),ier
      return
   endif
   open(unit=lutxt,file=F_ips,status='OLD')
   read(lutxt,*) ip1,ip2
   close(lutxt)
   
   ! Get vertical grid descriptor
   ier = vgd_new(d,unit=lu,format="fst",ip1=ip1,ip2=ip2)
   if(ier == VGD_ERROR )then
      print*,'Problem getting vertical grid descriptor'
      return
   endif
   
   ier = fstinl(lu,ni,nj,nk,-1,' ',-1,-1,-1,' ','TT',liste,infon,nmax)
   if(infon == 0 )then
      print*,'pas de record de TT'      
      return
   endif
   allocate(ip1s(infon))
   do k=1,infon
      ier = fstprm(liste(k),dateo,deet,npas,ni,nj,nk,nbits,datyp, &
           ip1,ip2,ip3,typvar,nomvar,etiket,grtyp,ig1,ig2,ig3,ig4,swa,lng, &
           dltf,ubc,extra1,extra2,extra3)
      ip1s(k)=ip1
   end do
   
   key = fstinf(lu,ni,nj,nk,-1,' ',-1,-1,-1,' ','P0')
   allocate(ff(ni,nj))
   ier = fstluk(ff,key,ni,nj,nk)
   if(ier.lt.0)then
      print*,'Problem with fstluk on P0'
      return
   endif
   ff=ff*100.
   allocate(ff_8(ni,nj))
   ff_8=ff

   ! Test 32 bits interface
   ier = vgd_levels(d,ip1s,pres,ff)
   if(ier == VGD_ERROR )then
      print*,'Problem with vgd_levels 32 bits'
      return
   endif
   pres=pres/100.
   do k=1,infon
      ier = fstprm(liste(k),dateo,deet,npas,ni,nj,nk,nbits,datyp, &
           ip1,ip2,ip3,typvar,nomvar,etiket,grtyp,ig1,ig2,ig3,ig4,swa,lng, &
           dltf,ubc,extra1,extra2,extra3)
      if(ier.lt.0)then
         print*,'Problem with fstprm on TT, ip1=',ip1
         return
      endif
      call incdatr(datev,dateo,deet*npas/3600.d0)
      key=fstinf(lu,ni,nj,nk,datev,' ',ip1,ip2,-1,typvar,'PX')     
      ier = fstluk(ff,key,ni,nj,nk)
      if(ier.lt.0)then
         print*,'Problem with fstinf on PX, ip1=',ip1
         return
      endif
      do j=1,nj
         do i=1,ni
            if(abs((ff(i,j)-pres(i,j,k))/ff(i,j))>epsilon)then
               print*,'32 bits: Difference in pressure is too large at'
               print*,'i,j,k,ff(i,j),pres(i,j,k)',i,j,k,ff(i,j),pres(i,j,k)
               return
            endif
         enddo
      enddo
   enddo
   
   ! Test 64 bits interface
   ier = vgd_levels(d,ip1s,pres_8,ff_8)
   if(ier == VGD_ERROR )then
      print*,'Problem with vgd_levels 64 bits'
      return
   endif   
   pres_8=pres_8/100.d0
   do k=1,infon
      ier = fstprm(liste(k),dateo,deet,npas,ni,nj,nk,nbits,datyp, &
           ip1,ip2,ip3,typvar,nomvar,etiket,grtyp,ig1,ig2,ig3,ig4,swa,lng, &
           dltf,ubc,extra1,extra2,extra3)
      if(ier.lt.0)then
         print*,'Problem with fstprm on TT, ip1=',ip1
         return
      endif
      call incdatr(datev,dateo,deet*npas/3600.d0)
      key=fstinf(lu,ni,nj,nk,datev,' ',ip1,ip2,-1,typvar,'PX')     
      ier = fstluk(ff,key,ni,nj,nk)
      if(ier.lt.0)then
         print*,'Problem with fstinf on PX, ip1=',ip1
         return
      endif
      do j=1,nj
         do i=1,ni
            if(abs((ff(i,j)-pres_8(i,j,k))/ff(i,j))>epsilon)then
               print*,'64 bits: Difference in pressure is too large at'
               print*,'i,j,k,ff(i,j),pres_8(i,j,k)',i,j,k,ff(i,j),pres_8(i,j,k)
               return
            endif
         enddo
      enddo
   enddo
   deallocate(ip1s,ff,ff_8,pres,pres_8)
   
   ier=fstfrm(lu)

   status=VGD_OK   
   
end function chek_levels_withref
