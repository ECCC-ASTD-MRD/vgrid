program tests
  use vGrid_Descriptors, only: vgrid_descriptor,vgd_new,vgd_get,vgd_dpidpis,VGD_OK
  use Unit_Testing, only: ut_report

  implicit none

  integer :: stat,lu=0,ni,nj,nk,fnom,fstouv,fstfrm,fclos,fstlir,fstinf,k,lutxt=69,ip1,ip2
  integer, dimension(:), pointer :: ip1_list
  real, dimension(:), pointer :: dpidpis_prof
  real :: eps=1.e-6,p0
  real :: w1
  type(vgrid_descriptor) :: d
  logical :: ok
  real*8, dimension(:), pointer :: coef_b
  
  stat=fnom(lu,"data/dm_5001_from_model_run","RND",0)
  if(stat.lt.0)then
     print*,'ERROR with fnom'
     call abort
  endif
  stat=fstouv(lu,'RND')
  if(stat.lt.0)then
     print*,'No record in RPN file'
     call abort
  endif
  open(unit=lutxt,file='data/dm_5001_ips.txt',status='OLD')
  read(lutxt,*) ip1,ip2
  close(lutxt)

  ! Get dpidpis
  stat = vgd_new(d,unit=lu,format="fst",ip1=ip1,ip2=ip2)
  stat = vgd_get(d,key='CB_M - vertical B coefficient (m)',value=coef_b)
  stat = vgd_get(d,key='VIPM - level ip1 list (m)'        ,value=ip1_list)

  stat = vgd_dpidpis(d,sfc_field=p0,ip1_list=ip1_list,dpidpis=dpidpis_prof)
  if(stat.ne.VGD_OK)then
     print*,'ERROR: problem with vgd_dpidpis'
     stat=fstfrm(lu)
     call abort
  endif

  print*,'size(dpidpis_prof)',size(dpidpis_prof)

  OK=.true.
  do k=1,size(coef_b)
     print*,coef_b(k),dpidpis_prof(k)
     if(coef_b(k).le.epsilon(coef_b(k)))then
        if(abs(coef_b(k)-dpidpis_prof(k))>epsilon(coef_b(k)))then
           print*,'OUPS 1'
           OK=.false.
           exit
        endif
     else
        if(abs(dpidpis_prof(k)- coef_b(k))/coef_b(k)>eps)then
           print*,'OUPS 2'
           OK=.false.
           exit
        endif
     endif
  enddo

  call ut_report(ok,message='Grid_Descriptors::vgd_dpidpis level calculation status')

  stat=fstfrm(lu)

end program tests
