program tests
  use vGrid_Descriptors, only: vgrid_descriptor,vgd_new,vgd_get,vgd_dpidpis,VGD_OK
  use Unit_Testing, only: ut_report

  implicit none

  integer :: stat,lu=0,ni,nj,nk,fnom,fstouv,fstfrm,fclos,fstlir,fstinf,k,lutxt=69,ip1,ip2
  integer, parameter :: i0=20,j0=10
  integer, dimension(:), pointer :: ip1_list
  real, dimension(:,:,:), pointer :: dpidpis_cube
  real*8, dimension(:,:,:), pointer :: dpidpis_cube_8
  real   :: epsilon  =1.e-5
  real, dimension(:,:), pointer :: p0,px
  real*8, dimension(:,:), pointer :: p0_8
  real   :: w1
  type(vgrid_descriptor) :: d
  logical :: ok
  real*8, dimension(:), pointer :: coef_b
  
  nullify(ip1_list,dpidpis_cube,dpidpis_cube_8,p0,px,p0_8,coef_b)
  
  stat=fnom(lu,"data/dm_5002_from_model_run","RND",0)
  if(stat.lt.0)then
     print*,'ERROR with fnom'
     call abort
  endif
  stat=fstouv(lu,'RND')
  if(stat.lt.0)then
     print*,'No record in RPN file'
     call abort
  endif
  open(unit=lutxt,file='data/dm_5002_ips.txt',status='OLD')
  read(lutxt,*) ip1,ip2
  close(lutxt)

  ! Get dpidpis
  stat = vgd_new(d,unit=lu,format="fst",ip1=ip1,ip2=ip2)

  stat = vgd_get(d,key='CB_T - vertical B coefficient (t)',value=coef_b)

  stat = vgd_get(d,key='VIPT - level ip1 list (t)'        ,value=ip1_list)

  stat = fstinf(lu,ni,nj,nk,-1,' ',-1,-1,-1,' ',"UU")

  allocate(p0(ni,nj),px(ni,nj),p0_8(ni,nj))

  stat = fstlir(p0,lu,ni,nj,nk,-1,'',-1,-1,-1,'','P0')
  p0  =p0*100. !mb to Pa
  p0_8=p0

  !===============
  ! Real interface
  
  stat = vgd_dpidpis(d,sfc_field=p0,ip1_list=ip1_list,dpidpis=dpidpis_cube)
  if(stat.ne.VGD_OK)then
     print*,'ERROR: problem with vgd_dpidpis real'
     stat=fstfrm(lu)
     call abort
  endif

  print*,'size(dpidpis_cube)',size(dpidpis_cube)

  OK=.true.
  do k=1,size(coef_b)
     stat = fstlir(px,lu,ni,nj,nk,-1,'',ip1_list(k),-1,-1,'','PX')
     w1=coef_b(k)*px(i0,j0)*100./p0(i0,j0)
     print*,w1,dpidpis_cube(i0,j0,k)
     if(abs(dpidpis_cube(i0,j0,k)- w1)/w1>epsilon)then
        print*,'vgd_dpidpis real do not validate'
        OK=.false.
     endif
  enddo

  !=================
  ! Real*8 interface
  
  stat = vgd_dpidpis(d,sfc_field=p0_8,ip1_list=ip1_list,dpidpis=dpidpis_cube_8)
  if(stat.ne.VGD_OK)then
     print*,'ERROR: problem with vgd_dpidpis real*8'
     stat=fstfrm(lu)
     call abort
  endif

  print*,'size(dpidpis_cube_8)',size(dpidpis_cube_8)

  OK=.true.
  do k=1,size(coef_b)
     stat = fstlir(px,lu,ni,nj,nk,-1,'',ip1_list(k),-1,-1,'','PX')
     w1=coef_b(k)*px(i0,j0)*100./p0_8(i0,j0)
     print*,w1,dpidpis_cube_8(i0,j0,k)
     ! Note since px is a real the precision cannot be hier than real
     if(abs(dpidpis_cube_8(i0,j0,k)- w1)/w1>epsilon)then
        print*,'vgd_dpidpis real*8 do not validate'
        OK=.false.
     endif
  enddo

  call ut_report(ok,message='Grid_Descriptors::vgd_dpidpis level calculation status')

  stat=fstfrm(lu)

end program tests
