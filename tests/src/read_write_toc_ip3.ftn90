program constructor
  use Grid_Descriptors, only: grid_descriptor,gd_new,gd_write,gd_get
  use Unit_Testing, only: ut_report

  implicit none

  type(grid_descriptor) :: d
  integer, parameter :: lu=10,lu2=20,lutxt=69
  integer :: stat,nk,ip1,ip2,kind,version
  integer :: fnom,fstouv,fstfrm
  real :: rc_1,rc_2
  real*8 :: pref_8,ptop_8
  real*8, dimension(:), pointer :: am,at,bm,bt
  integer, dimension(:), pointer :: ip1m,ip1t
  logical :: ok

  stat=fnom(lu,"data/dm_5002_from_model_run","RND",0)
  if(stat.lt.0)then
     print*,'ERROR with fnom'
     call abort
  endif
  stat=fstouv(lu,'RND')
  if(stat.le.0)then
     print*,'No record in RPN file'
     call abort
  endif
  open(unit=lutxt,file='data/dm_5002_ips.txt',status='OLD')
  read(lutxt,*) ip1,ip2
  close(lutxt)

  stat=fnom(lu2,"data/toc_toc.rpn","RND",0)
  if(stat.lt.0)then
     print*,'ERROR with fnom toc toc'
     call abort
  endif
  stat=fstouv(lu2,'RND')

  ! Construct a new set of 3D coordinate descriptors
  stat = gd_new(d,unit=lu,format="fst",ip1=ip1,ip2=ip2)

  ! Get everyting needed to simulate construction of !! but with a different ip3
  stat = gd_get(d,key='PREF',value=pref_8)
  stat = gd_get(d,key='PTOP',value=ptop_8)
  stat = gd_get(d,key='IP_1',value=ip1)
  stat = gd_get(d,key='IP_2',value=ip2)
  stat = gd_get(d,key='RC_1',value=rc_1)
  stat = gd_get(d,key='RC_2',value=rc_2)
  stat = gd_get(d,key='VIPM',value=ip1m)
  stat = gd_get(d,key='VIPT',value=ip1t)
  stat = gd_get(d,key='CA_M',value=am)
  stat = gd_get(d,key='CB_M',value=bm)
  stat = gd_get(d,key='CA_T',value=at)
  stat = gd_get(d,key='CB_T',value=bt)

  nk=size(ip1m)-1
  print*,'nk=',nk
  kind=5
  version=2

  stat = gd_new(d,        &
       kind     = kind,   &
       version  = version,&
       nk       = nk,     &
       ip1      = ip1,    &
       ip2      = ip2,    &
       ip3      = 1,      &
       ptop_8   = ptop_8, &
       pref_8   = pref_8, &
       rcoef1   = rc_1, &
       rcoef2   = rc_2, &
       a_m_8    = am,     &
       b_m_8    = bm,     &
       a_t_8    = at,     &
       b_t_8    = bt,     &
       ip1_m    = ip1m,   &
       ip1_t    = ip1t)

  stat = gd_write(d,unit=lu2,format="fst")
  call ut_report(stat,'Grid_Descriptors, gd_new, gd_get CA')

  stat=fstfrm(lu)
  stat=fstfrm(lu2)

end program constructor
