program add_toctoc
   use vGrid_Descriptors, only: vgrid_descriptor,vgd_new,vgd_write,vgd_print,VGD_ERROR
   implicit none
   integer, parameter :: ncle=3,lui=10,nmax=1000
   integer, dimension(nmax) :: liste
   integer, dimension(2*nmax) :: key_to_erase
   integer :: npos,istat,fnom,fstouv,fstfrm,infon,fstprm,fstinl,fstluk,fstinf,fstecr,fsteff,ind_to_erase
   integer :: i,key,luo,exdb,exfin
   character(len=256), dimension(ncle) :: cle,val,def
   logical :: info_L
   real, allocatable, dimension(:,:) :: tocsf,p0
   real*8, allocatable, dimension(:,:) :: toctoc
   real :: dummy
   real*8 :: nhours
   logical :: samefile_L
   character(len=12), parameter :: version='v_1.0.0'

   ! For fstprm
   integer :: ig1,ig2,ig3,ig4,dateo,deet,npas,datyp,nbits
   integer :: ni,nj,nk,ni2,nj2,nk2,nit,njt,nkt,nkmod
   integer :: ip1,ip2,ip3,swa,lng,dltf,ubc,extra1,extra2,extra3,datev
   character(len=1) :: grtyp
   character(len=2) :: typvar
   character(len=4) :: nomvar
   character(len=12) :: etiket

   type(vgrid_descriptor) :: vgd
   
   cle=(/'s.      ','d.      ','samefile'/)
   val=(/'undef   ','undef   ','NO      '/)
   def=(/'undef   ','undef   ','YES     '/)

   ind_to_erase=0

   !==========================================================================

   istat=exdb('add_toctoc',version,'NON')
   
   !==========================================================================
   ! Get keys
   npos=1
   call ccard(cle,def,val,ncle,npos) 
   
   info_L=.false.
   if(val(1).eq.'undef')then
      print*,'usage :    add_toctoc -s source_file -d destination_file'
      print*,'        or add_toctoc -s source_file -samefile'
      stop
   endif
   
   if(val(2).eq.'undef'.and.val(3).eq.'NO')then
      print*,'usage :    add_toctoc -s source_file -d destination_file'
      stop
   endif
   
   samefile_L=val(3).eq.'YES'

   !==========================================================================
   ! Open files
   istat=fnom(lui,val(1),'RND',0)
   if(istat.lt.0)then
      print*,'ERROR with fnom on file ',trim(val(1))
      call exit(1)
   endif
   istat=fstouv(lui,'RND')
   if(istat.le.0)then
      print*,'Error : no record in RPN file ',trim(val(1))
      istat=fstfrm(lui)
      call exit(1)
   endif

   !==========================================================================
   ! Look for !!SF if present then tell user to use convert_toctoc_5002
   istat=fstinl(lui,ni,nj,nk,-1,' ',-1,-1,-1,' ','!!SF',liste,infon,nmax)
   if(infon.gt.0)then
      print*,'ERROR record !!SF is present, use convert_toctoc_5002 instead'
      call exit(1)
   endif
   !
   istat=fstinl(lui,ni,nj,nk,-1,' ',-1,-1,-1,' ','!!',liste,infon,nmax)
   if(infon.gt.0)then
      print*,'Record !! already there , noting to do'
      goto 999
   endif
   !
   ! Open output file
   if(samefile_L)then
      luo=lui
   else
      luo=lui+1
      istat=fnom(luo,val(2),'RND',0)
      if(istat.lt.0)then
         print*,'ERROR with fnom on file ',trim(val(2))
         call exit(1)
      endif
      istat=fstouv(luo,'RND')
      if(istat.lt.0)then
         print*,'Error : problem with fstouv on ',trim(val(2))
         istat=fstfrm(luo)
         call exit(1)
      endif 
   endif

   istat=vgd_new(vgd,lui)
   if(istat.eq.VGD_ERROR)then
      print*,'Error with vgd_new'
      call exit(1)
   endif

   istat=vgd_print(vgd)
   if(istat.eq.VGD_ERROR)then
      print*,'Error with vgd_print'
      call exit(1)
   endif

   istat=vgd_write(vgd,luo)
   if(istat.eq.VGD_ERROR)then
      print*,'Error with vgd_print'
      call exit(1)
   endif

   !==========================================================================
   ! close file(s)
   if(.not.samefile_L)istat=fstfrm(luo)
999 continue
   istat=fstfrm(lui)
   istat=exfin('add_toctoc',version,'NON')
end program add_toctoc
