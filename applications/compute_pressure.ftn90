program compute_pressure
  use Grid_Descriptors, only: grid_descriptor,gd_new,gd_levels,GD_OK
  
  implicit none

  type(grid_descriptor) :: d
  integer, parameter :: ncle=3,lui=10,luo=11, nmax=1000
  integer, dimension(nmax) :: liste
  integer :: stat,infon,ier,npos,i,k,exdb,exfin
  integer :: fnom,fstouv,fstfrm,fstinf,key,fstluk,fstinl,fstprm,fstecr
  real, dimension(:,:,:), pointer :: pres
  real :: dummy
  logical :: ok
  character(len=256), dimension(ncle) :: cle,val,def
  character(len=4), dimension(2) :: my_var=(/'TT','UU'/)
  character(len=12), parameter :: version='v_1.0.0'

  ! For fstprm
  integer :: ig1,ig2,ig3,ig4,dateo,deet,npas,datyp,nbits
  integer :: ni,nj,nk,ni2,nj2,nk2,nit,njt,nkt,nkmod
  integer :: ip1,ip2,ip3,swa,lng,dltf,ubc,extra1,extra2,extra3,datev
  character(len=1) :: grtyp
  character(len=2) :: typvar
  character(len=4) :: nomvar
  character(len=12) :: etiket
  
  cle=(/'s.      ','d.      ','samefile'/)
  val=(/'undef'   ,'undef'   ,'NO'      /)
  def=(/'undef'   ,'undef'   ,'YES'     /)
  
  !==========================================================================
  
  stat=exdb('compute_pressure',version,'NON')
 
  !==========================================================================
  npos=1
  call ccard(cle,def,val,ncle,npos) 

  if(val(1).eq.'undef')then
     print*,'usage : compute_pressure -s sorce_file -d destination_file'
     stop
   endif
   
   if(val(2).eq.'undef')then
      print*,'usage : compute_pressure -s sorce_file -d destination_file'
      stop
   endif
   
  stat=fnom(lui,val(1),"RND",0)
  if(stat.lt.0)then
     print*,'ERROR with fnom on lui'
     call exit(1)
  endif
  stat=fstouv(lui,'RND')
  if(stat.le.0)then
     print*,'No record in RPN file'
     call exit(1)
  endif
  stat=fnom(luo,val(2),'RND',0)
  if(stat.lt.0)then
     print*,'ERROR with fnom on file ',trim(val(2))
     call exit(1)
  endif
  stat=fstouv(luo,'RND')
  if(stat.lt.0)then
     print*,'Error : problem with fstouv on ',trim(val(2))
     stat=fstfrm(luo)
     call exit(1)
  endif

  ! Get vertical grid descriptor
  stat = gd_new(d,unit=lui,format="fst",ip1=229,ip2=0)
  if(stat .ne. GD_OK )then
     print*,'Problem getting vertical grid descriptor'
     call exit(1)
  endif

  do i=1,2
     
     ier = fstinl(lui,ni,nj,nk,-1,' ',-1,-1,-1,' ',my_var(i),liste,infon,nmax)

     if(infon == 0 )then
        print*,'pas de record de',my_var(i)
        call exit(1)
     endif
     
     if(allocated(pres))deallocate(pres)
     stat = gd_levels(d,unit=lui,fstkeys=liste(1:infon),levels=pres)
     if(stat .ne. GD_OK )then
        print*,'Problem with gd_levels'
        call exit(1)
     endif
     pres=pres/100.
     do k=1,infon
        stat=fstprm(liste(k),dateo,deet,npas,ni,nj,nk,nbits,datyp,ip1,&
             ip2,ip3,typvar,nomvar,etiket,grtyp,ig1,ig2,ig3, &
             ig4,swa,lng,dltf,ubc,extra1,extra2,extra3)
        stat=fstecr(pres(1,1,k),dummy,-64,luo,dateo,deet,npas,ni,nj,nk, &
             ip1,ip2,ip3,typvar,'PX','RECOMPUTED',grtyp,ig1,ig2,ig3,ig4,datyp,.true.)
     enddo
  enddo

  

  stat=fstfrm(lui)
  stat=fstfrm(luo)
  
  stat=exfin('compute_pressure',version,'NON')

end program compute_pressure
